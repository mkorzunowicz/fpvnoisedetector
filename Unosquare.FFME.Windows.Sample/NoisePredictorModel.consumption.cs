// <auto-generated />
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Drawing;
using System.IO;

/// <summary>
/// Noise predictor model trained to detect 2 kinds of pictures: Good and Noise
/// which are mainly used to detect static video noise of analogue FPV footage,
/// but could be used for detecting noise in videos grabbed from VHS.
/// </summary>
public partial class NoisePredictorModel
{
    /// <summary>
    /// model input class for MLModel1.
    /// </summary>
    #region model input class
    public class ModelInput
    {
        /// <summary>
        /// Label given.
        /// </summary>
        [ColumnName(@"Label")]
        public string Label { get; set; }

        /// <summary>
        /// Source of the image.
        /// </summary>
        [ColumnName(@"ImageSource")]
        public byte[] ImageSource { get; set; }

    }

    #endregion

    /// <summary>
    /// model output class for MLModel1.
    /// </summary>
    #region model output class
    public class ModelOutput
    {
        /// <summary>
        /// Label given.
        /// </summary>
        [ColumnName(@"Label")]
        public uint Label { get; set; }

        /// <summary>
        /// Image source.
        /// </summary>
        [ColumnName(@"ImageSource")]
        public byte[] ImageSource { get; set; }

        /// <summary>
        /// Predicted label.
        /// </summary>
        [ColumnName(@"PredictedLabel")]
        public string PredictedLabel { get; set; }

        /// <summary>
        /// Prediction score.
        /// </summary>
        [ColumnName(@"Score")]
        public float[] Score { get; set; }

    }

    #endregion

    private static string MLNetModelPath = Path.GetFullPath("NoisePredictorModel.zip");

    /// <summary>
    /// Prediction engine.
    /// </summary>
    public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

    /// <summary>
    /// Use this method to predict on <see cref="ModelInput"/>.
    /// </summary>
    /// <param name="input">model input.</param>
    /// <returns><seealso cref=" ModelOutput"/></returns>
    public static ModelOutput Predict(ModelInput input)
    {
        var predEngine = PredictEngine.Value;
        return predEngine.Predict(input);
    }
    /// <summary>
    /// Predicts the score of the given bitmap. Does the byte convertion internally.
    /// </summary>
    /// <param name="bitmap"></param>
    /// <returns>Prediction output</returns>
    public static ModelOutput Predict(Bitmap bitmap)
    {
        using MemoryStream ms = new MemoryStream();
        bitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
        var bytes = ms.ToArray();

        NoisePredictorModel.ModelInput sampleData = new()
        {
            ImageSource = bytes,
        };

        // Make a single prediction on the sample data and print results.
        return Predict(sampleData);
    }

    private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
    {
        var mlContext = new MLContext();
        ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
        return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
    }
}
