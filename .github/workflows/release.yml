name: Tag a repo on closed pull request

on:
  push:
    branches:
      - master
      - cicd

jobs:
  tag-on-closed-pull-request:
    environment: release
    # runs-on: windows-latest
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 18.x

      - name: Install Node dependencies
        run: npm install @semantic-release/changelog @semantic-release/exec

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        # run: npx semantic-release --branches master
        run: npx semantic-release --branches cicd

      - name: Run bump_update.sh ${{ env.VERSION }}
        run: |
          cd Support
          chmod +x bump_update.sh
          ./bump_update.sh ${{ env.VERSION }}

      - name: Commit changes
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git commit -m "ci: auto-bumped the ${{ env.VERSION }} update file"
          git push

      - name: Setup .Net
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "7.0.x"
      - name: Run publish
        # run: dotnet publish ./FPVNoiseDetector/FPVNoiseDetector.csproj /p:AssemblyVersion=${GITHUB_REF##*/} /p:UseAppHost=true --output .out_win --runtime win-x64 --self-contained false --verbosity quiet /p:PublishSingleFile=true --configuration Release --framework net7.0-windows
        run: dotnet publish ./FPVNoiseDetector/FPVNoiseDetector.csproj /p:AssemblyVersion=${{ env.VERSION }} /p:UseAppHost=true --output .out_win --runtime win-x64 --self-contained false --verbosity quiet /p:PublishSingleFile=true --configuration Release --framework net7.0-windows

      - name: ZIP full app
        # run: zip -r fpvnoise-${GITHUB_REF##*/}.zip .out_win/fpvnoise.exe .out_win/NoisePredictorModel.zip .out_win/tensorflow.dll .out_win/LICENSE.txt
        run: |
          cd .out_win 
          zip -r ../fpvnoise-${{ env.VERSION }}.zip fpvnoise.exe NoisePredictorModel.zip tensorflow.dll LICENSE.txt
        # Compress-Archive -Path ".out_win/fpvnoise.exe", ".out_win/NoisePredictorModel.zip", ".out_win/tensorflow.dll", ".out_win/LICENSE.txt"  -DestinationPath "compressed.zip"

        # run: |
        #   $files = ".out_win/fpvnoise.exe", ".out_win/NoisePredictorModel.zip", ".out_win/tensorflow.dll", ".out_win/LICENSE.txt"
        #   Compress-Archive -Path $files -DestinationPath "fpvnoise-${{ env.VERSION }}.zip"
      - name: ZIP update
        # run: zip -r fpvnoise-${GITHUB_REF##*/}-update.zip .out_win/fpvnoise.exe .out_win/LICENSE.txt
        run: |
          cd .out_win 
          zip -r ../fpvnoise-${{ env.VERSION }}-update.zip fpvnoise.exe LICENSE.txt
        # run: |
        #   $files = ".out_win/fpvnoise.exe", ".out_win/LICENSE.txt"
        #   Compress-Archive -Path $files -DestinationPath "fpvnoise-${{ env.VERSION }}-update.zip"
      # - name: Upload build artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     # name: fpvnoise-${GITHUB_REF##*/}
      #     name: fpvnoise-${{ env.VERSION }}.zip
      #     path: fpvnoise-${{ env.VERSION }}.zip
      #     # path: fpvnoise-${GITHUB_REF##*/}.zip

      # - name: Upload build artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: fpvnoise-${{ env.VERSION }}-update
      #     path: fpvnoise-${{ env.VERSION }}-update.zip

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: fpvnoise-${{ env.VERSION }}.zip
          path: .out_win/fpvnoise.exe

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: fpvnoise-${{ env.VERSION }}.zip
          path: .out_win/LICENSE.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: fpvnoise-${{ env.VERSION }}-x.zip
          path: fpvnoise-${{ env.VERSION }}.zip

      - name: Gets latest created release info
        id: latest_release_info
        uses: jossef/action-latest-release-info@v1.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.latest_release_info.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./fpvnoise-${{ env.VERSION }}.zip
          asset_name: fpvnoise-${{ env.VERSION }}-upl.zip
          asset_content_type: application/zip
